require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/adventure_sessions", type: :request do
  let(:adventure) { create(:adventure, gamemaster: @active_user) }

  let(:valid_headers) {
    @authenticated_headers
  }

  describe "GET /index" do
    it "renders a successful response" do
      create(:adventure_session, adventure: adventure)
      get adventure_sessions_url(adventure), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      adventure_session = create(:adventure_session, adventure: adventure)
      get adventure_session_url(adventure, adventure_session), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    let(:valid_attributes) {
      { title: "Derrotando o Dragão Azul", description: "Uma aventura para derrotar o dragão azul" }
    }

    let(:invalid_attributes) {
      { title: nil, description: nil }
    }

    context "with valid parameters" do
      it "creates a new AdventureSession" do
        expect {
          post adventure_sessions_url(adventure),
               params: { adventure_session: valid_attributes }, headers: valid_headers, as: :json
        }.to change(AdventureSession, :count).by(1)
      end

      it "renders a JSON response with the new adventure_session" do
        post adventure_sessions_url(adventure),
             params: { adventure_session: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new AdventureSession" do
        expect {
          post adventure_sessions_url(adventure),
               params: { adventure_session: invalid_attributes }, headers: valid_headers, as: :json
        }.to change(AdventureSession, :count).by(0)
      end

      it "renders a JSON response with errors for the new adventure_session" do
        post adventure_sessions_url(adventure),
             params: { adventure_session: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "POST /finish" do
    it "finishes the adventure session" do
      adventure_session = create(:adventure_session, adventure: adventure)
      post finish_adventure_session_url(adventure, adventure_session), headers: valid_headers, as: :json
      adventure_session.reload
      expect(adventure_session.finished_at).to_not be_nil
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { title: "Derrotando o Dragão Azul", description: "Uma aventura para derrotar o dragão azul" }
      }

      it "updates the requested adventure_session" do
        adventure_session = create(:adventure_session, adventure: adventure)
        patch adventure_session_url(adventure, adventure_session),
              params: { adventure_session: new_attributes }, headers: valid_headers, as: :json
        adventure_session.reload
        expect(adventure_session.title).to eq("Derrotando o Dragão Azul")
        expect(adventure_session.description).to eq("Uma aventura para derrotar o dragão azul")
      end

      it "renders a JSON response with the adventure_session" do
        adventure_session = create(:adventure_session, adventure: adventure)
        patch adventure_session_url(adventure, adventure_session),
              params: { adventure_session: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let(:new_attributes) {
        { title: nil, description: nil }
      }

      it "renders a JSON response with errors for the adventure_session" do
        adventure_session = create(:adventure_session, adventure: adventure)
        patch adventure_session_url(adventure, adventure_session),
              params: { adventure_session: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested adventure_session" do
      adventure_session = create(:adventure_session, adventure: adventure)
      expect {
        delete adventure_session_url(adventure, adventure_session), headers: valid_headers, as: :json
      }.to change(AdventureSession, :count).by(-1)
    end
  end
end
