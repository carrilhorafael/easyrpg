require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/backstories", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Backstory. As you add validations to Backstory, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    CHARLATAN
  }

  let(:invalid_attributes) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      create(:backstory, creator: @active_user)
      get backstories_url, headers: @authenticated_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      backstory = create(:backstory, creator: @active_user)
      get backstory_url(backstory), headers: @authenticated_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Backstory" do
        expect {
          post backstories_url,
               params: { backstory: valid_attributes }, headers: @authenticated_headers, as: :json
        }.to change(Backstory, :count).by(1)
      end

      it "renders a JSON response with the new backstory" do
        post backstories_url,
             params: { backstory: valid_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Backstory" do
        expect {
          post backstories_url,
               params: { backstory: invalid_attributes }, headers: @authenticated_headers, as: :json
        }.to change(Backstory, :count).by(0)
      end

      it "renders a JSON response with errors for the new backstory" do
        post backstoryes_url,
             params: { backstory: invalid_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { title: "Criminal", description: "You are an experienced criminal with a history of breaking the law. You have spent a lot of time among other criminals and still have contacts within the criminal underworld. You're far closer than most people to the world of murder, theft, and violence that pervades the underbelly of civilization, and you have survived up to this point by flouting the rules and regulations of society." }
      }

      it "updates the requested backstory" do
        backstory = create(:backstory, creator: @active_user)
        patch backstory_url(backstory),
              params: { backstory: new_attributes }, headers: @authenticated_headers, as: :json
        backstory.reload

        expect(backstory.title).to eq(new_attributes.title)
        expect(backstory.description).to eq(new_attributes.description)
      end

      it "renders a JSON response with the backstory" do
        backstory = create(:backstory, creator: @active_user)
        patch backstory_url(backstory),
              params: { backstory: new_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the backstory" do
        backstory = create(:backstory, creator: @active_user)
        patch backstory_url(backstory),
              params: { backstory: invalid_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested backstory" do
      backstory = create(:backstory, creator: @active_user)
      expect {
        delete backstory_url(backstory), headers: @authenticated_headers, as: :json
      }.to change(Backstory, :count).by(-1)
    end
  end
end
