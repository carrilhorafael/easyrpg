require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/talents", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Talent. As you add validations to Talent, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    ACTOR
  }

  let(:invalid_attributes) {
    { title: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      create(:talent, creator: @active_user)
      get talents_url, headers: @authenticated_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      talent = create(:talent, creator: @active_user)
      get talent_url(talent), headers: @authenticated_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Talent" do
        expect {
          post talents_url,
               params: { talent: valid_attributes }, headers: @authenticated_headers, as: :json
        }.to change(Talent, :count).by(1)
      end

      it "renders a JSON response with the new talent" do
        post talents_url,
             params: { talent: valid_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Talent" do
        expect {
          post talents_url,
               params: { talent: invalid_attributes }, headers: @authenticated_headers, as: :json
        }.to change(Talent, :count).by(0)
      end

      it "renders a JSON response with errors for the new talent" do
        post talents_url,
             params: { talent: invalid_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        ALERT
      }

      it "updates the requested talent" do
        talent = create(:talent, creator: @active_user)
        patch talent_url(talent),
              params: { talent: new_attributes }, headers: @authenticated_headers, as: :json
        talent.reload
        expect(talent.title).to eq(ALERT[:title])
        expect(talent.prerequisites.as_json).to eq(ALERT[:prerequisites].as_json)
        expect(talent.features.as_json).to eq(ALERT[:features].as_json)
      end

      it "renders a JSON response with the talent" do
        talent = create(:talent, creator: @active_user)
        patch talent_url(talent),
              params: { talent: new_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the talent" do
        talent = create(:talent, creator: @active_user)
        patch talent_url(talent),
              params: { talent: invalid_attributes }, headers: @authenticated_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested talent" do
      talent = create(:talent, creator: @active_user)
      expect {
        delete talent_url(talent), headers: @authenticated_headers, as: :json
      }.to change(Talent, :count).by(-1)
    end
  end
end
